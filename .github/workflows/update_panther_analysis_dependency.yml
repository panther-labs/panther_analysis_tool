name: Update Panther Analysis Dependency

on:
  push
  # release:
  #   types: [published]

permissions:
  contents: write
  pull-requests: write

jobs:
  update_dependency:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout panther-analysis-tool Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        repository: panther-labs/panther_analysis_tool
        fetch-depth: 0
        token: ${{ secrets.PANTHER_BOT_AUTOMATION_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install toml pipenv

    - name: Extract version from pyproject.toml
      id: get_version
      run: |
        # Extract version from pyproject.toml
        VERSION=$(python3 -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Target version: $VERSION"

    - name: Checkout panther-analysis Repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        repository: panther-labs/panther-analysis
        fetch-depth: 0
        token: ${{ secrets.PANTHER_BOT_AUTOMATION_TOKEN }}
        path: panther-analysis

    # - name: Wait for PyPI availability
    #   run: |
    #     VERSION="${{ steps.get_version.outputs.version }}"
    #     echo "Waiting for panther-analysis-tool==$VERSION to be available on PyPI..."
        
    #     # Wait up to 10 minutes for the package to be available on PyPI
    #     for i in {1..60}; do
    #       if pip index versions panther-analysis-tool | grep -q "$VERSION"; then
    #         echo "Package panther-analysis-tool==$VERSION is available on PyPI"
    #         break
    #       fi
    #       echo "Attempt $i: Package not yet available, waiting 10 seconds..."
    #       sleep 10
          
    #       if [ $i -eq 60 ]; then
    #         echo "Timeout: Package panther-analysis-tool==$VERSION not available on PyPI after 10 minutes"
    #         exit 1
    #       fi
    #     done

    - name: Update Pipfile dependency
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        cd panther-analysis
        
        # Show current Pipfile content for debugging
        echo "Current Pipfile content:"
        grep "panther-analysis-tool" Pipfile || echo "panther-analysis-tool not found in Pipfile"
        
        # Replace the local file dependency with the PyPI version
        sed -i.bak 's/panther-analysis-tool = {file = "..", editable = true}/panther-analysis-tool = "=='$VERSION'"/' Pipfile
        
        # Verify the change was made
        echo "Updated Pipfile content:"
        grep "panther-analysis-tool" Pipfile
        
        # Remove backup file
        rm -f Pipfile.bak

    - name: Update Pipfile.lock
      run: |
        cd panther-analysis
        
        # Remove existing lock file and regenerate it
        rm -f Pipfile.lock
        pipenv lock
        
        echo "Pipfile.lock updated successfully"

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.PANTHER_BOT_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PANTHER_BOT_GPG_PRIVATE_KEY_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Create Pull Request
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        BRANCH_NAME="update-panther-analysis-tool-$VERSION"
        
        cd panther-analysis
        
        # Configure git
        git config --global user.email "github-service-account-automation@panther.io"
        git config --global user.name "panther-bot-automation"
        
        # Create and switch to new branch
        git checkout -b "$BRANCH_NAME"
        
        # Add changes
        git add Pipfile Pipfile.lock
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "No changes to commit. The dependency may already be up to date."
          exit 0
        fi
        
        # Commit changes
        git commit -S -m "Update panther-analysis-tool to v$VERSION

        Automatically updating panther-analysis-tool dependency from local editable 
        install to PyPI version $VERSION.
        
        This PR was automatically generated by the update_panther_analysis_dependency workflow."
        
        # Push branch
        git push --set-upstream origin "$BRANCH_NAME"
        
        # Create PR
        gh pr create \
          --title "Update panther-analysis-tool to v$VERSION" \
          --body "## ü§ñ Automated Dependency Update

        This PR automatically updates the \`panther-analysis-tool\` dependency in the panther-analysis repo from a local editable install to version **$VERSION** from PyPI.

        ### Changes
        - Updated \`Pipfile\`: Changed from \`{file = \"..\", editable = true}\` to \`\"==$VERSION\"\`
        - Regenerated \`Pipfile.lock\` with the new dependency version

        ### Triggered by
        Push to panther-analysis-tool repository (version $VERSION detected)

        ---
        *This PR was automatically created by the [update_panther_analysis_dependency](${{ github.server_url }}/${{ github.repository }}/actions/workflows/update_panther_analysis_dependency.yml) workflow.*" \
          --head "$BRANCH_NAME" \
          --base main
      env:
        GH_TOKEN: ${{ secrets.PANTHER_BOT_AUTOMATION_TOKEN }}

    - name: Notify on failure
      if: failure()
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "‚ùå Failed to update panther-analysis-tool dependency"
        echo "Please check the workflow logs and update manually if needed"
        echo "Target version: $VERSION"

